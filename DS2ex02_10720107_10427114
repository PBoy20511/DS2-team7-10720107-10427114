// 10720107 陳丕中 10427114 熊觀一  請助教下載GitHub版本評分

#include<iostream> 
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<string>
#include<cstring>


using namespace std ;

typedef struct CT {
	string nameSchool ; // All the content from the school
	string nameMajor ;
	string division ;
	string level ;
	int numStudent ;
	int numTeacher ;
	int numGraduate ; // number of graduates
	
	int numOrder ; // whatplace
} CollegeType ; 

class ClassList{
		
	vector< CollegeType > collegeSet ; 
	
	
	public:
		
	ClassList(){
		
	} // ClassList
	~ClassList(){
		ClearList() ;
	}
	
	bool Load( string fileName ) { 
	// 讀入資料
	    
    	FILE *infile = NULL ;
    	bool success = false ;
    	fileName = "input" + fileName + ".txt" ;
    	infile = fopen(fileName.c_str(), "r" ) ;

		if ( infile == NULL )
			;
		else{
      
        	char tempChar ;
        	int tempOrder = 1 ;
        	for ( int i = 0 ; i < 3 ; i++ )
        		while ( fscanf( infile, "%c", &tempChar ) != EOF && tempChar != '\n' )
            		;

        	CollegeType aCollege ;
        	aCollege.nameSchool = "" ;
        	aCollege.nameMajor = "" ;
        	aCollege.division = "" ;
        	aCollege.level = "" ;
        	aCollege.numStudent = 0 ;
        	aCollege.numTeacher = 0 ;
        	aCollege.numGraduate = 0 ;
        
			int numTab = 0 ;
			string stringStudent = "" ;
			string stringTeacher = "" ;
			string stringGraduate = "" ;
		
        	while ( fscanf( infile, "%c", &tempChar ) != EOF ) {
        		while ( fscanf( infile, "%c", &tempChar ) != EOF && tempChar != '\n' ) {
        			if ( tempChar == '\t' )
        				numTab++ ;
        			else if ( numTab == 1 )
        				aCollege.nameSchool = aCollege.nameSchool + tempChar ;
        			else if ( numTab == 3 )
        				aCollege.nameMajor = aCollege.nameMajor + tempChar ;
        			else if ( numTab == 4 )
        				aCollege.division = aCollege.division + tempChar ;
        			else if ( numTab == 5 )
        				aCollege.level = aCollege.level + tempChar ;
        			else if ( numTab == 6 )
        				stringStudent = stringStudent + tempChar ;
        			else if ( numTab == 7 )
        				stringTeacher = stringTeacher + tempChar ;
        			else if ( numTab == 8 )
        				stringGraduate = stringGraduate + tempChar ;
        		
        		} //while
        		
        		aCollege.numStudent = atoi( stringStudent.c_str() ) ;
        		aCollege.numTeacher = atoi( stringTeacher.c_str() ) ;
        		aCollege.numGraduate = atoi( stringGraduate.c_str() ) ;
        		aCollege.numOrder = tempOrder ;
        	
            	collegeSet.push_back( aCollege ) ;
            
            	aCollege.nameSchool = "" ;
	        	aCollege.nameMajor = "" ;
	        	aCollege.division = "" ;
	        	aCollege.level = "" ;
	        	aCollege.numStudent = 0 ;
	        	aCollege.numTeacher = 0 ;
	        	aCollege.numGraduate = 0 ;
	        
            	stringStudent = "" ;
            	stringTeacher = "" ;
            	stringGraduate = "" ;
            	numTab = 0 ;
            	tempOrder++ ;
            
        	} // while not EOF

        	success = true ;
        	fclose( infile ) ;

		} // else

		return success ;
	} // Load function 1 
	
	void Print() {
		for ( int i = 0 ; i < collegeSet.size() ; i++ ) {
			cout << collegeSet[i].nameSchool << "\t" << collegeSet[i].nameMajor << "\t"
				 << collegeSet[i].division << "\t" << collegeSet[i].level << "\t" 
				 << collegeSet[i].numStudent << "\t" << collegeSet[i].numTeacher << "\t"
				 << collegeSet[i].numGraduate << "\n";
		} // for
		
	} // Print function 2
	
	vector< CollegeType > GetSet() {
		return collegeSet ;
	} // GetSet function 3
	
	void ClearList() {
	    collegeSet.clear() ;
	} // ClearList function 4
	
	void Remove( CollegeType aCollege ) {
		for ( int i = 0 ; i < collegeSet.size() ; i++ ) {
			if ( collegeSet.at( i ).nameSchool == aCollege.nameSchool && collegeSet.at( i ).nameMajor == aCollege.nameMajor 
				  && collegeSet.at( i ).division == aCollege.division && collegeSet.at( i ).level == aCollege.level )
				collegeSet.erase( collegeSet.begin() + i ) ;
		} // for
	} // Remove function 5 
	
};

struct TreeNode{ // store 2-3 Tree's deta
	vector< CollegeType > *small = NULL ;
	vector< CollegeType > *big = NULL ; // deta
	
	
	TreeNode *left ;
	TreeNode *down ;
	TreeNode *right ; // pointer
	
	TreeNode *parent ; // parent
};

class Tree{
	TreeNode *head ;
	
	Tree(){
		head = NULL ;
	} 
	~Tree(){
	}
	
	bool IsEmpty(){
		if( head == NULL ){
			return true ;
		} // if
		else{
			return false ;
		}
	} // IsEmpty
	
	bool Search( TreeNode *walk, string name ){
		if( walk == NULL ){
			return false ;
		} // if
		else{
			
      
		} // else
		
	} // Search
	
	int HowManyItems( TreeNode *leaf ){ // find out how many item you have
	
		if( leaf->small != NULL ){ // the smallest one has item
			
			if( leaf->right != NULL ){ // the biggest one has item 
				return 2 ;
				
			} // if
			else{
				return 1 ;
			} // else
			
		} // if
		else{
			return 0 ;
		} // else
	} // HowManyItems
	
	void Build23Tree(){
	} // Build23Tree
	
	void Insert23Tree(){
	} // Insert
	
	void split(){
	} // split
};


int main(){
	
	int cmd ;

	cout << "(1) 23Tree (0) Quit" ;
	cin >> cmd ;
	while( cmd != 0 ){
		if( cmd == 1 ){
			cout << "file number" ;
			string filename ;
			cin >> filename ;
			ClassList list ;
			if( list.Load(filename) ){
				
			} // if
			else{
				cout << "Can't find filename" ;
			} // else
		} // if
		else{
			cout << "Wrong Cmd" ;
		} // else
	} // while
	
	cout << "Bye!" ;
} // main









